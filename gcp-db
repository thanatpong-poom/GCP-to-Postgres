from google.cloud import storage
from google.oauth2 import service_account
import os
import psycopg2
import time

def download_blob_into_memory(bucket_name, prefix_blob_name,bytes_start):
    """Downloads a blob into memory."""
    # The ID of your GCS bucket
    # bucket_name = "your-bucket-name"

    # The ID of your GCS object
    # blob_name = "storage-object-name"

    storage_client = storage.Client(credentials=credentials)

    bucket = storage_client.bucket(bucket_name)

    # Construct a client side representation of a blob.
    # Note `Bucket.blob` differs from `Bucket.get_blob` as it doesn't retrieve
    # any content from Google Cloud Storage. As we don't need additional data,
    # using `Bucket.blob` is preferred here.
    blobs = bucket.list_blobs()

    # create a file for incoming data in gcp

    d = open('file.csv','wb')

    for blob in blobs:

        #for loop to list all files that have the same prefix name

        if blob.name.startswith(prefix_blob_name):
            
            #download files and skip headers

            blob.download_to_file(d,start=bytes_start)

def import_data(project_name,table_name,bytes_start):
    with conn, conn.cursor() as cursor:
        download_blob_into_memory('bucker_name', project_name,bytes_start)        

        with open('file.csv','r') as f:
            #copy file from downloaded file to db
            conn.cursor().copy_from(f, table_name, sep='\t')
        conn.commit()
        #remove created file 
        os.remove('file.csv')

# start here

t0 = time.time()

#create credentials variable to access cloud storage
credentials = service_account.Credentials.from_service_account_file(
    filename=os.environ['GOOGLE_APPLICATION_CREDENTIALS'],
    scopes=['https://www.googleapis.com/auth/cloud-platform'])

#connect variable
conn = psycopg2.connect(
        host='host',
        user='users',
        password='Password',
        dbname='dbname',
        port=portnumber
    )

#delete all rows before inserting
with conn, conn.cursor() as cursor:
    cursor.execute('DELETE FROM test_production')
    cursor.execute('DELETE FROM test_industry')
    cursor.execute('DELETE FROM test_ingredient')

project_prefix_list = [('Production', 'test_production', 93),('Industry', 'test_industry',35)]

# try:

for project in project_prefix_list:
    import_data(project[0],project[1],project[2])
print("Import successfully")
# except:
#     print("Fail")

t1 = time.time()
total = t1-t0
# print excution time
print(f'The execution time is {total} second')

